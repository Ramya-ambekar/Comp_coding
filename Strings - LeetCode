557. Reverse Words in a String III

Example 1:

Input: s = "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"


class Solution {
    public String reverseWords(String s) {
        String[] words = s.split(" ");
         String[] result = new String[words.length];
        for(int j=0;j<words.length;j++){
            StringBuilder res = new StringBuilder(words[j]);
            res = res.reverse();
            result[j] = res.toString();
        }
        return String.join(" ",result);
    }
}

541. Reverse String II

Example 1:

Input: s = "onetwotenzero", k = 3
Output: "enotwonetzero"


class Solution {
    public String reverseStr(String s, int k) {
        int start =0;
        int n = s.length()-1;
        char[] chars = s.toCharArray();
        for(int i=0;i<n;i=i+(2*k)){
            start =i;
            int end = Math.min(start+k-1,n);
            char temp;
            while(start<end){
                temp = chars[start];
                chars[start] = chars[end];
                chars[end] = temp;
                start++;
                end--;
            }
        }

        return new String(chars);

        }
}


2325. Decode the Message

Input: key = "the quick brown fox jumps over the lazy dog", message = "vkbs bs t suepuv"
Output: "this is a secret"

class Solution {
    public String decodeMessage(String key, String message) {
        StringBuilder res = new StringBuilder();
        HashMap<Character,Character> map = new HashMap<>();
        key = key.replaceAll(" ","");
        char ch = 'a';
        for(char c : key.toCharArray()){
            if(!map.containsKey(c)){
                map.put(c,ch++);
            }
        }
        
        for(char i : message.toCharArray()){
            if(map.containsKey(i)){
                res.append(map.get(i));
            }else{
                res.append(i);
            }
        }

        return res.toString();
    }
}



1684. Count the Number of Consistent Strings

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.


class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int len = allowed.length();
        int count =0;
        HashSet<Character> set = new HashSet<>();
        for(int i=0;i<allowed.length();i++){
            set.add(allowed.charAt(i));
        }
        for(String word : words){
            boolean flag = true;
            for(int i=0;i<word.length();i++){
                if(!set.contains(word.charAt(i))){
                    flag = false;
                }
            }

            if(flag) count++;
        }

        return count;
    }
}
