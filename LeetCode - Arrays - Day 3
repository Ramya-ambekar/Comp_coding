1588. Sum of All Odd Length Subarrays

Approach 1 :

class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum =0;
        int val = 1;
       
        for(int i=0;i<arr.length;i++){
            for(int j=i;j<arr.length;j++){
                for(int k=i;k<=j;k++){
                    if((j-i+1)%2!=0){
                        sum += arr[k];
                    }
                }
             
            }
        }

        //System.out.print(sum);
        return sum;
    }

}


Approach 2 : O(N) time

class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum =0;
        for(int i=0;i<arr.length;i++){
            int left = i+1;
            int right = arr.length - i;
            int k = left * right;
            int odd = (k+1)/2;
            sum+= odd * arr[i];
        }
       
        return sum;
    }

}




Question 2:

2535. Difference Between Element Sum and Digit Sum of an Array


class Solution {
    public int differenceOfSum(int[] nums) {
        int sum1 = 0;
        int sum2= 0;
        int result = 0;

        for(int i=0;i<nums.length;i++){
            String num = String.valueOf(nums[i]);
            int val = nums[i];
            sum1 += val;
            while(val>0){
                int rem = val  % 10;
                sum2 = sum2 + rem;
                val = val /10;   
                System.out.println(sum2);
            }
            
        }
        result = Math.abs(sum2 - sum1);

        return result;
    }
}


2006. Count Number of Pairs With Absolute Difference K

Approach 1: Brute force - O(n^2)

class Solution {
    public int countKDifference(int[] nums, int k) {
        int count =0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(Math.abs(nums[i]-nums[j]) ==k){
                    count++;
                }
            }
        }

        return count;
    }
}


Approach 2 : Optimized

class Solution {
    public int countKDifference(int[] nums, int k) {
        int count =0;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int num : nums){
            if(map.containsKey(num-k))
                count+= map.get(num-k);
            if(map.containsKey(num+k))
                count+= map.get(num+k);
          map.put(num,map.getOrDefault(num,0)+1);
        }
        return count;
    }
}
